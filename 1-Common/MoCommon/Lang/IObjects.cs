using System.Collections.Generic;

namespace MO.Common.Lang
{
   //============================================================
   // <T>对象集合接口。</T>
   //============================================================
   public interface IObjects<T> : IEnumerable<T>
   {
      //============================================================
      // <T>获得或设定索引位置的对象。</T>
      //
      // @param index 索引位置
      //============================================================
      T this[int index] { get; set; }

      //============================================================
      // <T>获得总大小。</T>
      //
      // @return 总大小
      //============================================================
      int Size { get; }

      //============================================================
      // <T>获得长度。</T>
      //
      // @return 长度
      //============================================================
      int Count { get; }

      //============================================================
      // <T>获得内存。</T>
      //
      // @return 内存
      //============================================================
      T[] Items { get; }

      //============================================================
      // <T>判断是否为空。</T>
      //
      // @return 是否为空
      //============================================================
      bool IsEmpty();

      //============================================================
      // <T>判断是否含有指定内容。</T>
      //
      // @param value 对象内容
      // @return 是否相等
      //============================================================
      bool Contains(T value);

      //============================================================
      // <T>判断是否和指定对象数组相等。</T>
      //
      // @param items 对象数组
      // @param offset 开始位置
      // @param count 对象个数
      // @return 是否相等
      //============================================================
      bool Equals(T[] items, int offset, int count);

      //============================================================
      // <T>判断是否和指定对象集合相等。</T>
      //
      // @param items 对象集合
      // @return 是否相等
      //============================================================
      bool Equals(T[] items);

      //============================================================
      // <T>判断是否和指定对象集合相等。</T>
      //
      // @param items 对象集合
      // @return 是否相等
      //============================================================
      bool Equals(IObjects<T> items);

      //============================================================
      // <T>查找对象的位置。</T>
      // <P>如果不存在则返回-1。</P>
      //
      // @param value 对象
      // @param offset 开始位置
      // @return 所在位置
      //============================================================
      int IndexOf(T value, int offset);

      //============================================================
      // <T>查找对象的位置。</T>
      // <P>如果不存在则返回-1。</P>
      //
      // @param value 对象
      // @return 所在位置
      //============================================================
      int IndexOf(T value);

      //============================================================
      // <T>反向查找对象的位置。</T>
      // <P>如果不存在则返回-1。</P>
      //
      // @param value 对象
      // @param offset 开始位置
      // @return 所在位置
      //============================================================
      int LastIndexOf(T value, int offset);

      //============================================================
      // <T>反向查找对象的位置。</T>
      // <P>如果不存在则返回-1。</P>
      //
      // @param value 对象
      // @return 所在位置
      //============================================================
      int LastIndexOf(T value);

      //============================================================
      // <T>查找指定对象集合的位置。</T>
      // <P>如果不存在则返回-1。</P>
      //
      // @param items 对象集合
      // @param offset 开始位置
      // @param count 对象个数
      // @return 所在位置
      //============================================================
      int Find(T[] items, int offset, int count);

      //============================================================
      // <T>查找指定对象集合的位置。</T>
      // <P>如果不存在则返回-1。</P>
      //
      // @param items 对象集合
      // @return 所在位置
      //============================================================
      int Find(T[] items);

      //============================================================
      // <T>查找对象数组的位置。</T>
      // <P>如果不存在则返回-1。</P>
      //
      // @param items 对象数组
      // @return 所在位置
      //============================================================
      int Find(IObjects<T> items);

      //============================================================
      // <T>获得首对象。</T>
      //
      // @return 对象
      //============================================================
      T First { get; }

      //============================================================
      // <T>查找首对象。</T>
      //
      // @param count 对象个数
      //============================================================
      T NvlFirst { get; }

      //============================================================
      // <T>获得尾对象。</T>
      //
      // @return 对象
      //============================================================
      T Last { get; }

      //============================================================
      // <T>查找尾对象。</T>
      //
      // @return 对象
      //============================================================
      T NvlLast { get; }

      //============================================================
      // <T>确保容量大小。</T>
      // <P>如果内存比指定内存大，则重新收集内存，并且保留原来数据。</P>
      //
      // @param size 容量大小
      //============================================================
      void EnsureSize(int size);

      //============================================================
      // <T>获得索引位置的对象。</T>
      // <P>如果不存在产生例外。</P>
      //
      // @param index 索引位置
      // @return 对象
      //============================================================
      T Get(int index);

      //============================================================
      // <T>尝试获得索引位置的对象。</T>
      // <P>如果不存在则返回该类型的默认值。</P>
      //
      // @param index 索引位置
      // @return 对象
      //============================================================
      T TryGet(int index);

      //============================================================
      // <T>设置索引位置的对象。</T>
      // <P>如果不存在产生例外。</P>
      //
      // @param index 索引位置
      // @param value 对象
      //============================================================
      void Set(int index, T value);

      //============================================================
      // <T>尝试设置索引位置的对象。</T>
      // <P>如果不存在则不设置内容。</P>
      //
      // @param index 索引位置
      // @param value 对象
      //============================================================
      void TrySet(int index, T value);

      //============================================================
      // <T>设置索引位置的对象。</T>
      // <P>如果不存在则扩展对象大小，设置内容。</P>
      //
      // @param index 索引位置
      // @param value 对象
      //============================================================
      void SetExtend(int index, T value);

      //============================================================
      // <T>设置对象个数。</T>
      //
      // @param count 对象个数
      //============================================================
      void SetCount(int count);

      //============================================================
      // <T>接收对象数组。</T>
      //
      // @param items 对象数组
      // @param offset 开始位置
      // @param count 对象个数
      //============================================================
      void Assign(T[] items, int offset, int count);

      //============================================================
      // <T>接收对象数组。</T>
      //
      // @param items 对象数组
      //============================================================
      void Assign(T[] items);

      //============================================================
      // <T>接收对象数组。</T>
      //
      // @param items 对象数组
      //============================================================
      void Assign(IObjects<T> items);

      //============================================================
      // <T>追加对象数组。</T>
      //
      // @param items 对象数组
      // @param offset 开始位置
      // @param count 对象个数
      //============================================================
      void Append(T[] items, int offset, int count);

      //============================================================
      // <T>追加对象数组。</T>
      //
      // @param items 对象数组
      //============================================================
      void Append(T[] items);

      //============================================================
      // <T>追加对象数组。</T>
      //
      // @param items 对象数组
      //============================================================
      void Append(IObjects<T> items);

      //============================================================
      // <T>弹出第一个对象。</T>
      //
      // @return 对象
      //============================================================
      T Shift();

      //============================================================
      // <T>尝试第一个对象。</T>
      //
      // @return 对象
      //============================================================
      T TryShift();

      //============================================================
      // <T>追加对象到第一个位置。</T>
      //
      // @param value 对象
      //============================================================
      void Unshift(T value);

      //============================================================
      // <T>弹出最后一个对象。</T>
      //
      // @return 对象
      //============================================================
      T Pop();

      //============================================================
      // <T>尝试弹出最后一个对象。</T>
      //
      // @return 对象
      //============================================================
      T TryPop();

      //============================================================
      // <T>追加对象到尾位置。</T>
      //
      // @param value 对象
      // @return 追加位置
      //============================================================
      int Add(T value);

      //============================================================
      // <T>追加对象到尾位置。</T>
      //
      // @param value 对象
      //============================================================
      void Push(T value);

      //============================================================
      // <T>移除指定索引位置的对象。</T>
      //
      // @param index 索引位置
      // @return 对象
      //============================================================
      T Erase(int index);

      //============================================================
      // <T>尝试移除指定索引位置的对象。</T>
      //
      // @param index 索引位置
      // @return 对象
      //============================================================
      T TryErase(int index);

      //============================================================
      // <T>移除指定对象。</T>
      // <P>如果未找到对象的话，产生例外。</P>
      //
      // @param value 对象
      //============================================================
      bool Remove(T value);

      //============================================================
      // <T>替换对象中的内容为指定内容。</T>
      //
      // @param from 被替换内容
      // @param to 替换内容
      // @return 替换次数
      //============================================================
      int Replace(T from, T to);

      //============================================================
      // <T>反转所有对象。</T>
      //============================================================
      void Reverse();

      //============================================================
      // <T>对内部对象进行排序。</T>
      //============================================================
      void Sort();

      //============================================================
      // <T>对内部对象进行排序。</T>
      //
      // @param comparer 比较器
      //============================================================
      void Sort(IComparer<T> comparer);

      //============================================================
      // <T>刷新对象块到外部。</T>
      //
      // @return 对象数组
      //============================================================
      T[] Flush();

      //============================================================
      // <T>刷新对象块到外部。</T>
      //
      // @param items 对象数组
      //============================================================
      void Flush(IObjects<T> items);

      //============================================================
      // <T>复制对象集合到新的内存块中。</T>
      //
      // @param position 内部起始位置
      // @param items 对象集合
      // @param offset 对象开始位置
      // @param count 对象复制个数
      //============================================================
      int ToArray(int position, T[] items, int offset, int count);

      //============================================================
      // <T>复制对象到新的内存块中。</T>
      //
      // @param offset 开始位置
      // @param count 对象
      //============================================================
      T[] ToArray(int offset, int count);

      //============================================================
      // <T>复制对象到新的内存块中。</T>
      //
      // @param offset 开始位置
      // @param count 对象
      //============================================================
      T[] ToArray();

      //============================================================
      // <T>清除所有对象。</T>
      //============================================================
      void Clear();

      //============================================================
      // <T>清除所有数据内容。</T>
      //============================================================
      void Reset();

      //============================================================
      // <T>释放所有对象。</T>
      //============================================================
      void Release();
   }
}
